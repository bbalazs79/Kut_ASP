@{
    ViewData["Title"] = "Home Page";
}
@model List<Kutatas_core.Models.Food>
<div id="navigation">
    @{ Html.RenderPartial("~/Views/Shared/Navigation.cshtml"); }
</div>
<body class="container">
    <div class="ordered"><h2>Név</h2><h2>Darab</h2><h2>Ár</h2><h2>Összeg</h2></div>
    <ul class="orderedlist">
        <li class="cartlist">


        </li>
    </ul>


    <!-- Button trigger modal -->
    <button type="button" id="orders" class="btn btn-primary" data-toggle="modal" data-target="#exampleModal" @*onclick="SaveOrder()"*@>
        Tovább a fizetéshez
    </button>

    <!-- Modal -->
    <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Rendelés adatai</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                       
                    </button>
                </div>
                <div class="modal-body">
                    <div>

                        <label for="email">Email</label>
                        <input type="email" name="email" class="form-control is-valid" id="email" placeholder="email@email.com" required>
                    </div>
                    <div>
                        <label for="firstname">First Name</label>
                        <input type="text" class="form-control is-valid" id="first_name" placeholder="First Name" required>
                    </div>

                    <div>
                        <label for="lastname">Last Name</label>
                        <input type="text" class="form-control is-valid" id="last_name" placeholder="Last Name" required>
                    </div>
                    <div>
                        <label for="city">City</label>
                        <input type="text" class="form-control is-valid" id="city" placeholder="City" required>
                    </div>
                    <div>
                        <label for="phonenume">Phone number</label>
                        <input type="number" class="form-control is-valid" id="phone" placeholder="example:+36201112242" required>
                    </div>
                    <div>
                        <label for="address">Address</label>
                        <input type="text" class="form-control is-valid" id="address" placeholder="Cool str." required>
                    </div>
                    <div class="paying_container">
                        <div>
                            <label for="card">Bank kártya</label>
                            <input type="radio" name="pay" id="card" value="card">
                        </div>
                        <div>
                            <label for="cash">Készpénz</label>
                            <input type="radio" name="pay" id="cash" value="cash">
                        </div>
                        <div>
                            <label for="other">Szép kártya</label>
                            <input type="radio" name="pay" id="other" value="other">
                        </div>

                    </div>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Vissza</button>
                    <button type="button" class="btn btn-primary" id="order_food" onclick="SaveOrder()">Megrendelés</button>

                </div>
            </div>
        </div>
    </div>
</body>


<style>
    .paying_container{
        width:50%;
        display:flex;
        flex-flow:wrap;
    }
    .paying_container div{
        width:100%;
        

    }
    .paying_container label{
        color:black;
        
    }
    .paying_container input{
       float:right;
    }

</style>

<script>
    
    //console.log(sessionStorage.getItem(cart.id));
    
    
    var cartContent = JSON.parse(sessionStorage.getItem(cart.id));
    console.log(cartContent);
    if (cartContent == null) {
         cartContent = [];
    }

    list();
    function list() {
    for (let j = 0; j < cartContent.length; j++) {

        document.querySelector('.cartlist').innerHTML += `
        <div class="orderedfoods">
        <div> <h2>${cartContent[j].name}</h2></div>
        <div><h2>${cartContent[j].count} db</h2></div>
        <div> <h2> ${cartContent[j].price} Ft </h2> </div>
        <div><h2> ${cartContent[j].count * cartContent[j].price} Ft </h2></div>
        <div>
        <div class="btn btn-info" onclick="subItem(this)" data-id="${(cartContent[j].id)}"><i class="fas fa-minus"></i></div>
        <div class="btn btn-succes" onclick="addItem(this)" data-id="${(cartContent[j].id)}"><i class="fas fa-plus"></i></div>
        <div class="btn btn-danger" onclick="deleteItem(this)" data-id="${(cartContent[j].id)}"><i class="fas fa-trash-alt"></i></div>
         </div>
        </div>`;

           
        }
    }
    function deleteLis() {
        var elemnts = document.querySelectorAll(".orderedfoods");
        for (var i = 0; i < elemnts.length; i++) {
            elemnts[i].remove();
        }
        
        /*  frissítjük az adatbázist */
        
    }

    function addItem(item) {
        
        for (var j = 0; j < cartContent.length; j++) {
            
            if (cartContent[j].id == item.dataset.id) {
                
                cartContent[j].count++;
                sessionStorage.setItem('cart', JSON.stringify(cartContent));
                deleteLis(item);
                list();
                

                    
            }
            
        }
        
        }

    

    function subItem(item) {
        for (let i = 0; i < cartContent.length; i++) {
            if (cartContent[i].id == item.dataset.id && cartContent[i].count > 1) {
                cartContent[i].count--;
                sessionStorage.setItem('cart', JSON.stringify(cartContent));
                for (var j = 0; j < cartContent.length; j++) {
                    if (cartContent[j].id == item.dataset.id) {
                        //reFresh(item, i);
                        deleteLis(item);
                        list();
                    }
                }
                //document.querySelector('.totalPrice').innerHTML = '$' + cartTotal();
            } else if (cartContent[i].id == item.dataset.id) {
                deleteItem(item);
            }
        }
    }

    function deleteItem(item) {
        for (let i = 0; i < cartContent.length; i++) {
            if (cartContent[i].id == item.dataset.id) {
                /* kliensoldalon  0zuk a változót */
                cartContent[i].count = 0;

                cartContent.splice(i, 1);
                /*  töröljük a DOM elemet   */
                deleteLis(item);
                /**/
                list();
                
                /*  frissítjük az adatbázist */
                sessionStorage.setItem('cart', JSON.stringify(cartContent));
                /*   DOM-ban lévő értékeket frissítjük (totalPrice-t)  */
                
               // document.querySelector('.totalPrice').innerHTML = '$' + cartTotal();
            }

        }
        }  

    function SaveOrder() {
        var price = 0;

        for (var i = 0; i < cartContent.length; i++) {
            price = price + cartContent[i].price;
        }

        $.post('/Orders/InsertOrder', {
            food: cartContent,
            ordererFisrtName:$('#first_name').val(),
            ordererLastName:$('#last_name').val(),
            ordererCity:$('#city').val(),
            ordererAddress:$('#address').val(),
            ordererPhoneNumber: $('#phone').val(),
            allPrice: price
        },
            function (data) {
                if (data.Succeed) {
                    alert("Mentve!");
                }
                else {
                    alert("Nincs menntve!");
                }
            }, 'json');
    }
   
</script>

